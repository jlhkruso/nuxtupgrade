@use "sass:math";

@function remSize($size) {
  @return math.div($size, 16px) * 1rem;
}

/* Colors */
$colorWhite: #fff;
$colorOffWhite: #efefef;
$colorGreen: var(--v-primary-base);
$colorRed: var(--v-error-base);
$colorYellow: var(--v-warning-base);
$colorLightGreen: var(--v-secondary-base);
$colorLightestGreen: #98cfb9;
$colorGray: var(--v-accent-base);
$colorGrayLight: #eff3f1;
$colorGrayLighter: var(--v-primary40-base);
$colorTextLight: #778a83;
$colorGreen60: #c2d0c7;

// transitions
$custom-transition--cubic: cubic-bezier(0.45, 0, 0, 1);
$custom-transition: 0.3s $custom-transition--cubic;
$custom-transition-slow: 1s $custom-transition--cubic;

//////// layout
// bankbox
$bank-box-width: remSize(165px);

// nav
$navWidth: remSize(85px);
$burgerIconHeight: remSize(16px);

// page title
$pageTitleHeight: remSize(60px);

// sidebar
$sidebarWidth: remSize(250px);

// adminbar
$adminBarHeight: remSize(40px);

// border
$border: 1px solid $colorGrayLighter;
$border-gray: 1px solid var(--v-accent-base);
$border-thin: thin solid rgba(0, 0, 0, 0.08);

// fonts
$fontEmona: "Emona W00", sans-serif;
$fontEmonaSemi: "Emona W00 Semibold", sans-serif;
$fontGotham: "HCo Gotham", sans-serif;

// font weights
$fontWeightBold: 700;
$fontWeightMedium: 500;
$fontWeightNormal: 400;
$fontWeightLight: 300;

$body-font-family: "HCo Gotham", sans-serif;
$heading-font-family: "Emona W00", "Emona W00 Semibold", serif;
$title-font: $heading-font-family;
$btn-font-weight: 400;
$border-radius-root: 0;

$material-light: (
  background: white,
);
$line-height-root: 1.3 !default;

@mixin article-h1 {
  font-size: remSize(50px);
  font-weight: $fontWeightNormal;
  line-height: remSize(62px);
  margin-bottom: remSize(40px);
  margin-top: remSize(20px);
  text-align: left;
}
@mixin position-center-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
@mixin link-with-arrow {
  cursor: pointer;
  display: inline;
  padding-right: (20px);
  font-weight: $fontWeightNormal;
  color: var(--v-primary-base);
  transition: color $custom-transition;
  svg {
    width: remSize(10px);
    height: remSize(10px);
    margin-left: remSize(5px);
  }
}
@mixin vertical-line {
  content: "";
  background-color: var(--v-primary40-base);
  height: remSize(24px);
  width: 1px;
  position: absolute;
  top: remSize(8px);
  right: 0;
}
@mixin link-with-arrow-rte {
  font-weight: $fontWeightMedium;
  &:after {
    content: "";
    display: inline-block;
    height: 10px;
    width: 10px;
    margin-left: remSize(6px);
    background-image: url("~/assets/icons/icon_arrow-right.svg");
    background-repeat: no-repeat;
    background-position: 100% center;
  }
}

@mixin vuetify-thumb-slider {
  // overwrite vuetify slider
  //  thumb
  .v-slider__thumb-label {
    font-weight: $fontWeightMedium;
    color: var(--v-primary-base);
    font-size: remSize(13px);
    margin-bottom: remSize(5px);
    cursor: ew-resize;
  }

  .v-slider__thumb,
  .v-slider__thumb-label {
    // overwrite inline vuetify color
    border: 1px solid var(--v-primary-base) !important;
  }
  // track height
  .v-slider__track-container,
  .v-slider__track {
    height: remSize(8px);
    border-radius: remSize(5px);
    overflow: hidden;
    cursor: ew-resize;
  }
  // track dot
  .v-slider__thumb {
    height: remSize(16px);
    width: remSize(16px);
    left: -8px;
    cursor: ew-resize;
  }
  .v-slider__thumb::after,
  .v-slider__thumb::before {
    left: -11px;
    top: -11px;
  }

  .v-slider__thumb-container:hover .v-slider__thumb:before,
  .v-slider__thumb-container--focused .v-slider__thumb:before,
  .v-slider__thumb-container--active .v-slider__thumb:before {
    background: var(--v-primary-base);
  }
}

$breakpoints: (
  "extra-small": 599px,
  "small": 750px,
  "medium": 959px,
) !default;

@mixin breakpoint($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

@mixin breakpoint-max($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (max-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}
@mixin breakpoint-height-max($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (max-height: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}
